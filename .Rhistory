e =  matrix(c(0.0580039, 0.328075, 0.835406, 0.769593, 0.55812, 0.305069, 0.358679, 0.766043,  0.7509, 0.331014, 0.543086, 0.569183, 0.810268, 0.443486, 0.90413, 0.261646, 0.540639, 0.169093, 0.104325, 0.00767548, 0.734475, 0.682804, 0.553442, 0.489786, 0.564496,  0.819368, 0.250775, 0.0794024, 0.169182, 0.5101, 0.987236, 0.759916, 0.927058, 0.423335, 0.649831, 0.612767), nrow=6, ncol=6, byrow=TRUE)
is.positive.definite(e)
library(MASS)
library(corpcor)
is.positive.definite(e)
cov_unr <-make.positive.definite(e)
cov_unr
e
mu = rep(0,npheno1)
mu = rep(0,10)
mu
minorAlleleCountsBinomial = function(numtrios,MAF){
    mom1 = rbinom(numtrios, 1, MAF)
    mom1[mom1==0]=2 ##to match cosi
    mom2 = rbinom(numtrios, 1, MAF)
    mom2[mom2==0]=2
    dad1 = rbinom(numtrios, 1, MAF)
    dad1[dad1==0]=2
    dad2 = rbinom(numtrios, 1, MAF)
    dad2[dad2==0]=2
    eur = cbind(mom1,mom2,dad1,dad2)
    kids1 <- sample(c(1,2), numtrios, replace=TRUE)
    kids2 <- sample(c(3,4), numtrios, replace=TRUE)
    kids <- matrix(numeric(numtrios*2), nrow=numtrios)
    for(id in 1:numtrios){
        kids[id,1] <- eur[id, kids1[id]]
        kids[id,2] <- eur[id, kids2[id]]
    }
    eur_kid <- (kids[,1] == 1) + (kids[,2] == 1)
    eur_mom <- (eur[,1] == 1) + (eur[,1] == 1)
    eur_dad <- (eur[,3] == 1) + (eur[,4] == 1)
    return( list(G_kid=eur_kid, G_mom=eur_mom, G_dad=eur_dad) )
}
maf = 0.25 
traitcor = "med"
nassoc1 = 1 
nassoc2 = 1 
npheno1 = 1 
npheno2 = 1 
n_unrelated = 100 
n_variants = 500
causal_var = 0.01
test.approach = 1 
sim.approach = 3 
ignoreZ = TRUE
set.seed(1234)
UNR_OBS = matrix(rep(NA,n_variants*n_unrelated),nrow=n_unrelated)
for(i in 1:n_variants){
    out = minorAlleleCountsBinomial(n_unrelated, maf)
    UNR_OBS[,i]= as.matrix(out$G_mom)
}
MAF_unr = colMeans(UNR_OBS)/2
MAF_unr
typeof(MAF_unr)
causal.ind = sample(1:500,5,replace=FALSE)
causal.ind
minorAlleleCountsBinomial = function(numtrios,MAF){
    mom1 = rbinom(numtrios, 1, MAF)
    mom1[mom1==0]=2 ##to match cosi
    mom2 = rbinom(numtrios, 1, MAF)
    mom2[mom2==0]=2
    dad1 = rbinom(numtrios, 1, MAF)
    dad1[dad1==0]=2
    dad2 = rbinom(numtrios, 1, MAF)
    dad2[dad2==0]=2
    eur = cbind(mom1,mom2,dad1,dad2)
    kids1 <- sample(c(1,2), numtrios, replace=TRUE)
    kids2 <- sample(c(3,4), numtrios, replace=TRUE)
    kids <- matrix(numeric(numtrios*2), nrow=numtrios)
    for(id in 1:numtrios){
        kids[id,1] <- eur[id, kids1[id]]
        kids[id,2] <- eur[id, kids2[id]]
    }
    eur_kid <- (kids[,1] == 1) + (kids[,2] == 1)
    eur_mom <- (eur[,1] == 1) + (eur[,1] == 1)
    eur_dad <- (eur[,3] == 1) + (eur[,4] == 1)
    return( list(G_kid=eur_kid, G_mom=eur_mom, G_dad=eur_dad) )
}
minorAlleleCountsBinomial(500, 0.25)
causal.ind = sample(1:500,floor(0.01*500),replace=FALSE)
causal.inf
causal.ind
createCovMatrix = function(npheno, traitcor){
    if(traitcor == "block" || traitcor == "antiblock"){
        if(npheno %% 2 != 0)
            stop("cannot do block covariance matrix if npheno%%2 != 0")
    }
    if(traitcor == "none"){
        phencor_ll <- 0
        phencor_ul <- 0
    }else if (traitcor=="low") {
        phencor_ll <- 0
        phencor_ul <- 0.3
    } else {
        if (traitcor=="med" || traitcor == "block" || traitcor == "antiblock") {
            phencor_ll <- 0.3
            phencor_ul <- 0.5
        } else {
            if (traitcor=="high") {
                phencor_ll <- 0.5
                phencor_ul <- 0.7
            }
        }
    }
    if(npheno == 1){
        mat = as.matrix(runif(1,min=phencor_ll,max=phencor_ul))
    }else{
        if(traitcor != 'block' && traitcor != 'antiblock'){
            cor = runif((npheno*(npheno-1))/2,min=phencor_ll,max=phencor_ul)
            mat <- matrix(0, npheno,npheno)
            mat[lower.tri(mat, diag=FALSE)] <- cor
            mat = mat + t(mat) + diag(1, nrow=npheno)
        }else{
            if(traitcor == 'block'){
                m = npheno/2
                cor1 = runif((m*(m-1))/2,min=phencor_ll,max=phencor_ul)
                mat1 <- matrix(0, m,m)
                mat1[lower.tri(mat1, diag=FALSE)] <- cor1
                mat1 = mat1 + t(mat1) + diag(1, nrow=m)
                cor2 = runif((m*(m-1))/2,min=phencor_ll,max=phencor_ul)
                mat2 <- matrix(0, m,m)
                mat2[lower.tri(mat2, diag=FALSE)] <- cor2
                mat2 = mat2 + t(mat2) + diag(1, nrow=m)
                mat = blockMatrixDiagonal(mat1,mat2)
            }else{
                cor = runif((npheno*(npheno-1))/2,min=phencor_ll,max=phencor_ul)
                mat1 <- matrix(0, npheno,npheno)
                mat1[lower.tri(mat1, diag=FALSE)] <- cor
                mat1 = mat1 + t(mat1) + diag(1, nrow=npheno)
                mat = blockMatrixAntiDiagonal(mat1,npheno/2)
            }
        }
    }
    return(mat)
}
## function to set up the parameters to simulate the phenotypes associated with genotypes
## it returns the beta matrix and the covariance matrix
parameters4phenotypeSimulation = function(npheno, traitcor, causal.ind, nassoc, variant, MAF_unr){
    if(npheno < nassoc)
        stop("Error: npheno<nassoc")
    MAF_C_unr<-MAF_unr[causal.ind]
    ## pairwise similarity randomly generated from unif(phencor_ll, phencor_ul)
    cov_unr= createCovMatrix(npheno, traitcor)
    ## beta matrix: npheno by num of causal variants
    betamat_unr <- matrix(0,nrow=npheno,ncol=length(causal.ind))
    if(nassoc > 0){
        hvec_unr<-rep(0.0,nassoc)
        for (i in 1:nassoc) {
            if (variant=="rare")
                betamat_unr[i,] <- (0.4 + rnorm(length(causal.ind), 0, 0.1))*abs(log(MAF_C_unr, base=10))
            else if (variant=="common")
                betamat_unr[i,] <- rep(log(1.5),length(causal.ind))
            hvec_unr[i] <- sum(betamat_unr[i,]^2*2*MAF_C_unr*(1-MAF_C_unr))
        }
        ## note: the first nassoc phenotypes are the ones that are associated with the genotype
        for (i in 1:nassoc) {
            for (ii in 1:nassoc) {
                if (i==ii){
                    cov_unr[i,ii] <- 1-hvec_unr[i]
                } else if(ii>i) {
                    cov_unr[i,ii] <- cov_unr[i,ii]*((1-hvec_unr[i])^0.5)*((1-hvec_unr[ii])^0.5)
                    cov_unr[ii,i] <- cov_unr[i,ii]
                }
            }
        }
        if(!is.positive.definite(cov_unr))
            cov_unr <- make.positive.definite(cov_unr)
    }
    return( list(betamat=betamat_unr, cov=cov_unr) )
}
parameters4phenotypeSimulation(2, "low", causal.ind, 1, 0.25)
parameters4phenotypeSimulation(2, "low", causal.ind, 1, "rare", 0.25)
function parameters4phenotypeSimulation(npheno, traitcor, causal_ind, nassoc, variant, MAF_unr)
    if npheno < nassoc
        error("Error: npheno<nassoc")
    end
parameters4phenotypeSimulation = function(npheno, traitcor, causal.ind, nassoc, variant, MAF_unr){
    if(npheno < nassoc)
        stop("Error: npheno<nassoc")
    MAF_C_unr<-MAF_unr[causal.ind]
    return(MAF_C_unr)
}
parameters4phenotypeSimulation(2, "low", causal.ind, 1, "rare", 0.25)
MAF_unr
parameters4phenotypeSimulation(2, "low", causal.ind, 1, "rare", MAF_unr)
UNR_OBS = [size(n_unrelated,1), repeat(NaN, n_variants*n_unrelated)]
maf = 0.25 
traitcor = "med"
nassoc1 = 1 
nassoc2 = 1 
npheno1 = 1 
npheno2 = 1 
n_unrelated = 100 
n_variants = 500
causal_var = 0.01
test.approach = 1 
sim.approach = 3 
ignoreZ = TRUE
set.seed(1234)
UNR_OBS = matrix(rep(NA,n_variants*n_unrelated),nrow=n_unrelated)
UNR_OBS
UNR_OBS = matrix(rep(NA,n_variants*n_unrelated),nrow=n_unrelated)
for(i in 1:n_variants){
    out = minorAlleleCountsBinomial(n_unrelated, maf)
}
out
minorAlleleCountsBinomial = function(numtrios,MAF){
    mom1 = rbinom(numtrios, 1, MAF)
    mom1[mom1==0]=2 ##to match cosi
    mom2 = rbinom(numtrios, 1, MAF)
    mom2[mom2==0]=2
    dad1 = rbinom(numtrios, 1, MAF)
    dad1[dad1==0]=2
    dad2 = rbinom(numtrios, 1, MAF)
    dad2[dad2==0]=2
    eur = cbind(mom1,mom2,dad1,dad2)
    return(eur)
}
minorAlleleCountsBinomial(500, 0.25)
minorAlleleCountsBinomial = function(numtrios,MAF){
    mom1 = rbinom(numtrios, 1, MAF)
    mom1[mom1==0]=2 ##to match cosi
    mom2 = rbinom(numtrios, 1, MAF)
    mom2[mom2==0]=2
    dad1 = rbinom(numtrios, 1, MAF)
    dad1[dad1==0]=2
    dad2 = rbinom(numtrios, 1, MAF)
    dad2[dad2==0]=2
    eur = cbind(mom1,mom2,dad1,dad2)
    kids1 <- sample(c(1,2), numtrios, replace=TRUE)
    return(kids1)
}
minorAlleleCountsBinomial(500, .25)
minorAlleleCountsBinomial = function(numtrios,MAF){
    mom1 = rbinom(numtrios, 1, MAF)
    mom1[mom1==0]=2 ##to match cosi
    mom2 = rbinom(numtrios, 1, MAF)
    mom2[mom2==0]=2
    dad1 = rbinom(numtrios, 1, MAF)
    dad1[dad1==0]=2
    dad2 = rbinom(numtrios, 1, MAF)
    dad2[dad2==0]=2
    eur = cbind(mom1,mom2,dad1,dad2)
    kids1 <- sample(c(1,2), numtrios, replace=TRUE)
    kids2 <- sample(c(3,4), numtrios, replace=TRUE)
    kids <- matrix(numeric(numtrios*2), nrow=numtrios)
    for(id in 1:numtrios){
        kids[id,1] <- eur[id, kids1[id]]
        kids[id,2] <- eur[id, kids2[id]]
    }
    eur_kid <- (kids[,1] == 1) + (kids[,2] == 1)
    return(eur_kid)
}
minorAlleleCountsBinomial(500 .25)
minorAlleleCountsBinomial(500, .25)
minorAlleleCountsBinomial = function(numtrios,MAF){
    mom1 = rbinom(numtrios, 1, MAF)
    mom1[mom1==0]=2 ##to match cosi
    mom2 = rbinom(numtrios, 1, MAF)
    mom2[mom2==0]=2
    dad1 = rbinom(numtrios, 1, MAF)
    dad1[dad1==0]=2
    dad2 = rbinom(numtrios, 1, MAF)
    dad2[dad2==0]=2
    eur = cbind(mom1,mom2,dad1,dad2)
    kids1 <- sample(c(1,2), numtrios, replace=TRUE)
    kids2 <- sample(c(3,4), numtrios, replace=TRUE)
    kids <- matrix(numeric(numtrios*2), nrow=numtrios)
    for(id in 1:numtrios){
        kids[id,1] <- eur[id, kids1[id]]
        kids[id,2] <- eur[id, kids2[id]]
    }
    eur_kid <- (kids[,1] == 1) + (kids[,2] == 1)
    eur_mom <- (eur[,1] == 1) + (eur[,1] == 1)
    eur_dad <- (eur[,3] == 1) + (eur[,4] == 1)
    return( list(G_kid=eur_kid, G_mom=eur_mom, G_dad=eur_dad) )
}
 minorAlleleCountsBinomial(500, 0.25)
UNR_OBS = matrix(rep(NA,n_variants*n_unrelated),nrow=n_unrelated)
for(i in 1:n_variants){
    out = minorAlleleCountsBinomial(n_unrelated, maf)
    UNR_OBS[,i]= as.matrix(out$G_mom)
}
UNR_OBS
MAF_unr = colMeans(UNR_OBS)/2
MAF_unr
parameters4phenotypeSimulation(2, "low", causal_ind, 1, "rare", MAF_unr)
parameters4phenotypeSimulation(2, "low", causal.ind, 1, "rare", MAF_unr)
hvec_unr<-rep(0.0,nassoc)
hvec_unr<-rep(0.0,1)
hvec_unr
MAF_C_unr<-MAF_unr[causal.ind]
MAF_C_unr
abs(log(MAF_C_unr, base=10))
simulatePhenotypes = function(npheno, traitcor, causal.ind, nassoc, variant, MAF, n_unrelated, G){
    ## Creating parameters to simulate phenotype
    out2 = parameters4phenotypeSimulation(npheno, traitcor, causal.ind, nassoc, variant, MAF)
    betamat_unr = out2$betamat
    cov_unr = out2$cov
##    print(betamat_unr)
##    print(cov_unr)
##    print(nrow(UNR_OBS[1,causal.ind]))
##    print(ncol(UNR_OBS[1,causal.ind]))
    ## Actual phenotype simulation:
    P0_UNR <- matrix(numeric(n_unrelated*npheno), ncol=npheno)
    for(i in 1:n_unrelated)
        P0_UNR[i,] <- mvrnorm(1,betamat_unr %*% G[i,causal.ind], cov_unr)
    return( P0_UNR )
}
G  = matrix(c(0.182378, 0.764705, 0.351618, .599969, .786265, .0844763, .43153, .969674, .408121, .233296, .250268, .641506), ncol=1)
simulatePhenotypes = function(npheno, traitcor, causal.ind, nassoc, variant, MAF, n_unrelated, G)
end
simulatePhenotypes = function(npheno, traitcor, causal.ind, nassoc, variant, MAF, n_unrelated, G){
    ## Creating parameters to simulate phenotype
    out2 = parameters4phenotypeSimulation(npheno, traitcor, causal.ind, nassoc, variant, MAF)
    betamat_unr = out2$betamat
    cov_unr = out2$cov
##    print(betamat_unr)
##    print(cov_unr)
##    print(nrow(UNR_OBS[1,causal.ind]))
##    print(ncol(UNR_OBS[1,causal.ind]))
    ## Actual phenotype simulation:
    P0_UNR <- matrix(numeric(n_unrelated*npheno), ncol=npheno)
    for(i in 1:n_unrelated)
        P0_UNR[i,] <- mvrnorm(1,betamat_unr %*% G[i,causal.ind], cov_unr)
    return( P0_UNR )
}
simulatePhenotypes(npheno, traitcor, causal.ind, nassoc, variant, MAF, n_unrelated, G)
parameters4phenotypeSimulation = function(npheno, traitcor, causal.ind, nassoc, variant, MAF_unr){
    if(npheno < nassoc)
        stop("Error: npheno<nassoc")
    MAF_C_unr<-MAF_unr[causal.ind]
    ## pairwise similarity randomly generated from unif(phencor_ll, phencor_ul)
    cov_unr= createCovMatrix(npheno, traitcor)
    ## beta matrix: npheno by num of causal variants
    betamat_unr <- matrix(0,nrow=npheno,ncol=length(causal.ind))
    if(nassoc > 0){
        hvec_unr<-rep(0.0,nassoc)
        for (i in 1:nassoc) {
            if (variant=="rare")
                betamat_unr[i,] <- (0.4 + rnorm(length(causal.ind), 0, 0.1))*abs(log(MAF_C_unr, base=10))
            else if (variant=="common")
                betamat_unr[i,] <- rep(log(1.5),length(causal.ind))
            hvec_unr[i] <- sum(betamat_unr[i,]^2*2*MAF_C_unr*(1-MAF_C_unr))
        }
        ## note: the first nassoc phenotypes are the ones that are associated with the genotype
        for (i in 1:nassoc) {
            for (ii in 1:nassoc) {
                if (i==ii){
                    cov_unr[i,ii] <- 1-hvec_unr[i]
                } else if(ii>i) {
                    cov_unr[i,ii] <- cov_unr[i,ii]*((1-hvec_unr[i])^0.5)*((1-hvec_unr[ii])^0.5)
                    cov_unr[ii,i] <- cov_unr[i,ii]
                }
            }
        }
        if(!is.positive.definite(cov_unr))
            cov_unr <- make.positive.definite(cov_unr)
    }
    return( list(betamat=betamat_unr, cov=cov_unr) )
}
variant = "common"
simulatePhenotypes(npheno, traitcor, causal.ind, nassoc, variant, MAF, n_unrelated, G)
npheno = 2
nasssoc = 1
MAF = MAF_unr
simulatePhenotypes(npheno, traitcor, causal.ind, nassoc, variant, MAF, n_unrelated, G)
q()
